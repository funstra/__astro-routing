---
import Time from "@lib/components/Time.astro";
import { MarkdownInstance } from "astro";
import { readdirSync } from "fs";
import WorkLayout from "src/layouts/WorkLayout.astro";

export async function getStaticPaths() {
  const works = await Astro.glob("./_works/*.md");
  return works.map(md => {
    return {
      params: {
        work: md.frontmatter.title,
      },
      props: md,
    };
  });
}

const { frontmatter, rawContent, compiledContent } =
  Astro.props as MarkdownInstance<{
    title: string;
    date: string;
    enddate: string;
  }>;

const date = new Date(frontmatter.date);

const noDs = (s: string) => s !== ".DS_Store";

let workImgs;

const workDir = readdirSync(`public/assets/work/${frontmatter.title}`);
if (workDir.find(f => f === "video")) {
  workImgs = readdirSync(`public/assets/work/${frontmatter.title}/video`)
    .filter(noDs)
    .map(file => ({
      p: `/assets/work/${frontmatter.title}/posters/${file.replace(
        ".mp4",
        ".jpeg"
      )}`,
      v: `/assets/work/${frontmatter.title}/video/${file}`,
    }));
} else {
  workImgs = readdirSync(`public/assets/work/${frontmatter.title}/img`)
    .filter(noDs)
    .map(file => `/assets/work/${frontmatter.title}/img/${file}`);
}
---

<WorkLayout title={frontmatter.title}>
  <header class="col-end-13 text-right items-end flex flex-col gap-2xs mb-xs">
    <h2 class="">{frontmatter.title}</h2>
    {
      frontmatter.date ? (
        <div class="flex gap-2xs">
          <Time day={false} date={date} />
          {frontmatter.enddate === "continue" ? (
            <span class="flex gap-2xs items-center font-mono   mt-auto">
              <span>&mdash;</span>
              <span class="-translate-y-[1px]">&cir;</span>
            </span>
          ) : (
            ""
          )}
        </div>
      ) : (
        ""
      )
    }
  </header>
  <!-- <p class="md:col-span-7 col-span-full mb-xl">{rawContent}</p> -->
  <div class="col-start-2 md:col-start-8 col-span-full mb-xs text-right">
    <Fragment set:html={compiledContent()} />
  </div>
  <hr class="border-dashed border-[1px] col-start-12 col-span-full mb-2xl" />
  <ul class="row-start-5 col-span-full grid md:grid-cols-2 gap-xs">
    {
      workImgs.map(url => (
        <li>
          {url?.v ? (
            <video
              src={url.v}
              data-poster={url.p}
              preload="none"
              type="video/mp4"
              loop=""
              muted=""
              playsinline=""
              controls
            />
          ) : (
            <img loading="lazy" src={url} />
          )}
        </li>
      ))
    }
  </ul>

  <style>
    img,
    video {
      height: 100%;
    }
  </style>
</WorkLayout>

<script>
  const fn = e => {
    console.log(e);
    const vids = document.querySelectorAll("video");
    const obs = new IntersectionObserver(
      (ent, ob) => {
        ent.forEach(e => {
          if (e.isIntersecting) {
            e.target.setAttribute("poster", e.target.dataset.poster);
          }
        });
      },
      {
        threshold: 0.1,
      }
    );
    vids.forEach(vid => {
      obs.observe(vid);
    });
  };
  document.addEventListener("rooting-done", fn);
  window.onload = fn;
</script>
